{
  "pipelineSpec": {
    "components": {
      "comp-predict-batch": {
        "executorLabel": "exec-predict-batch",
        "inputDefinitions": {
          "parameters": {
            "context_filenames": {
              "type": "STRING"
            },
            "date": {
              "type": "STRING"
            },
            "gcs_bucket": {
              "type": "STRING"
            },
            "model_name": {
              "type": "STRING"
            },
            "output_path": {
              "type": "STRING"
            },
            "prediction_data": {
              "type": "STRING"
            },
            "prediction_dates": {
              "type": "STRING"
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-predict-batch": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "predict_batch"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-storage' 'numpy' 'pandas==0.25.3' 'scikit-learn' 'fsspec' 'gcsfs' 'matplotlib' 'statsmodels' 'datetime' 'joblib' 'keras' 'pathlib' 'tensorflow' 'kfp==1.8.19' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef predict_batch(gcs_bucket: str, date: str, prediction_dates: list, prediction_data: list, output_path: str, model_name: str, context_filenames: list):\n    import joblib\n    from google.cloud import storage\n    import pandas as pd\n    import numpy as np\n    import tensorflow\n    import keras\n\n    bucket = storage.Client().bucket(gcs_bucket)\n\n    for context_filename, context_filepath in context_filenames:\n        blob = bucket.blob(context_filename)\n        blob.download_to_filename(context_filename)\n\n    # # Load ML model from GCS\n    # storage_client = storage.Client()\n    # bucket = storage_client.bucket(gcs_bucket)\n    # blobs = bucket.list_blobs(prefix=\"model.sav/\")\n    # for blob in blobs:\n    #     blob.download_to_filename(filename)\n    from pathlib import Path\n\n    # bucket_name = 'your-bucket-name'\n    directory = \"model.sav/\"\n    # dl_dir = 'your-local-directory/'\n\n    storage_client = storage.Client()\n    bucket = storage_client.bucket(gcs_bucket)\n    blobs = bucket.list_blobs(prefix=directory)  # Get list of files\n    for blob in blobs:\n        if blob.name.endswith(\"/\"):\n            continue\n        file_split = blob.name.split(\"/\")\n        directory = \"/\".join(file_split[0:-1])\n        Path(directory).mkdir(parents=True, exist_ok=True)\n        blob.download_to_filename(blob.name)\n\n    import neural_net\n    import load\n    import preprocessing\n\n    model = neural_net.neural_net(keras.models.load_model(\"model.sav\"))\n\n    period_prediction_dates = pd.PeriodIndex([pd.Period(date_str, freq='M') for date_str in prediction_dates])\n    prediction_y = pd.DataFrame(prediction_data, index=period_prediction_dates)\n    # Predict for the next 5 days\n    prediction = model.predict_future(prediction_y,60)\n    prediction = pd.DataFrame(prediction)\n\n    # Store prediction to GCS\n    bucket.blob(output_path).upload_from_string(prediction.to_csv(index=False), 'text/csv')\n\n    print(f\"Prediction file path: {output_path}\")\n\n"
            ],
            "image": "python:3.7"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "predictionpipeline"
    },
    "root": {
      "dag": {
        "tasks": {
          "predict-batch": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-predict-batch"
            },
            "inputs": {
              "parameters": {
                "context_filenames": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[[\"preprocessing.py\", \"../Forecasting/preprocessing.py\"], [\"load.py\", \"../Forecasting/preprocessing.py\"], [\"neural_net.py\", \"../Forecasting/neural_net.py\"]]"
                    }
                  }
                },
                "date": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "test"
                    }
                  }
                },
                "gcs_bucket": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "ada_finance_dataset"
                    }
                  }
                },
                "model_name": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "model.sav"
                    }
                  }
                },
                "output_path": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "S&P_predict_pipeline/artefacts/prediction.csv"
                    }
                  }
                },
                "prediction_data": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[0.06620338374239543, -0.034790280150643116, -0.03128115590767955, 0.026407735677767663, 0.06058054250201228, -0.16453824983904186, -0.07353143982925614, 0.1385626133318898, 0.06410453410304862, 0.037262647380755354, -0.12800937387268418, -0.16751942146354715, 0.05239897475640021, -0.011995446814985544, 0.021839703586553627, 0.008355904280568538, 0.037799137543684136, -0.07705370558020896, -0.014932277136125105, 0.022576177478886184, -0.14759350651303071, -0.12186129512874688, 0.08252334119361193, -0.04842514455729585, -0.1276932751623432, -0.0011882531810900598, 0.02893664015414088, -0.1410762108409972, 0.009675505427617193, 0.0671904047976013, 0.07018769917047019, -0.07683186579126511, -0.16455135773317608, 0.03640162463691898, 0.02559845686661477, 0.048921496698459466]"
                    }
                  }
                },
                "prediction_dates": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[\"2015-03\", \"2015-04\", \"2015-05\", \"2015-06\", \"2015-07\", \"2015-08\", \"2015-09\", \"2015-10\", \"2015-11\", \"2015-12\", \"2016-01\", \"2016-02\", \"2016-03\", \"2016-04\", \"2016-05\", \"2016-06\", \"2016-07\", \"2016-08\", \"2016-09\", \"2016-10\", \"2016-11\", \"2016-12\", \"2017-01\", \"2017-02\", \"2017-03\", \"2017-04\", \"2017-05\", \"2017-06\", \"2017-07\", \"2017-08\", \"2017-09\", \"2017-10\", \"2017-11\", \"2017-12\", \"2018-01\", \"2018-02\"]"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "predict-batch"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.19"
  },
  "runtimeConfig": {
    "gcsOutputDirectory": "gs://ada_finance_dataset/S&P_train_pipeline"
  }
}